# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: demo # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-appsync-offline
  - serverless-offline
  - serverless-appsync-plugin

provider:
  name: aws
  runtime: nodejs8.10

custom:
  serverless-offline:
    port: 4000

  appsync-offline:
    port: 4001

  appSync:
    schema: schema.graphql
    name: GraphQL_Trello_Clone
    authenticationType: API_KEY
    mappingTemplatesLocation: ./src/schema/
    mappingTemplates:
      - ${file(./src/schema/board/board.mapping.yml)}
      - ${file(./src/schema/ticket/ticket.mapping.yml)}
      - ${file(./src/schema/comment/comment.mapping.yml)}
      - ${file(./src/schema/user/user.mapping.yml)}

    dataSources:
      - type: AWS_LAMBDA
        name: boards
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlBoardLambdaFunction, Arn] }
          functionName: GraphqlBoard

      - type: AWS_LAMBDA
        name: tickets
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlTicketLambdaFunction, Arn] }
          functionName: GraphqlTicket

      - type: AWS_LAMBDA
        name: comments
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlCommentLambdaFunction, Arn] }
          functionName: GraphqlComment

      - type: AWS_LAMBDA
        name: users
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlUserLambdaFunction, Arn] }
          functionName: GraphqlUser

functions:
  GraphqlBoard:
    handler: handler.board
    environment:
      NODE_ENV: production

  GraphqlTicket:
    handler: handler.ticket
    environment:
      NODE_ENV: production

  GraphqlComment:
    handler: handler.comment
    environment:
      NODE_ENV: production

  GraphqlUser:
    handler: handler.user
    environment:
      NODE_ENV: production

  hello:
    handler: handler.hello
    environment:
      NODE_ENV: production
    events:
      - http:
          path: /hello
          method: get
